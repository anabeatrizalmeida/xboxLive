

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Games {
  id     String @id @default(uuid())
  title  String @unique
  coverImageUrl String @map("cover_image_url")
  description String
  year Int
  imdbScore Int @map("imdb_score")
  trailerYouTubeUrl String @map("trailer_youtube_url")
  gameplayYouTubeUrl String @map("gameplay_youtube_url")

  genres Genres[]
  profiles Profiles[]
  favoriteGames FavoriteGames[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("games")
}

model Genres {
  id     String @id @default(uuid())
  name  String

  games Games[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("genres")
}

model Profiles {
  id     String @id @default(uuid())
  title  String
  imageURL String @map("image_url")

  users   Users   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  games Games[]
  favoriteGames FavoriteGames?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model Users {
  id     String @id @default(uuid())
  name  String
  email String @unique
  password String
  cpf Int @unique
  isAdmin Boolean @default(false) @map("is_admin")

  profiles Profiles[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model FavoriteGames {
  id String @id @default(uuid())

  profiles   Profiles @relation(fields: [profileId], references: [id])
  profileId String  @unique @map("profile_id")

  games Games[]

  @@map("favorite_games")
}
